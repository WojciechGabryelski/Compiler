%{
#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <list>
#include "compiler.hpp"
using namespace std;
int yylex();
void yyset_in(FILE* in_str);
void yyset_out(FILE* out_str);
void yyerror (char const *);
extern int yylineno;
%}
%union {
    char *text;
    list<string> *list_type;
    Value *value_type;
    Procedure *proc_type;
    Main *main_type;
    Condition *condition;
}
%token PROCEDURE
%token IS
%token VAR
%token MY_BEGIN
%token END
%token PROGRAM
%token IF
%token THEN
%token ELSE
%token ENDIF
%token WHILE
%token DO
%token ENDWHILE
%token REPEAT
%token UNTIL
%token READ
%token WRITE
%token <text> NUM
%token <text> IDENTIFIER
%token SUBSTITUTE
%token NEQ
%token GEQ
%token LEQ
%type <list_type> procedures
%type <main_type> main
%type <text> declarations
%type <proc_type> proc_head
%type <list_type> proc_call
%type <list_type> arguments
%type <list_type> commands
%type <list_type> command
%type <condition> condition
%type <list_type> expression
%type <value_type> value
%%
program_all:
            procedures main {
                finishProgram($1, $2);
            }
        ;

procedures:
            procedures PROCEDURE proc_head IS VAR declarations MY_BEGIN commands END {
                $$ = finishProcedure($3, $1, $8);
            }
        |	procedures PROCEDURE proc_head IS MY_BEGIN commands END {
                $$ = finishProcedure($3, $1, $6);
            }
        |   { $$ = new list<string>(); }
        ;

main:
            PROGRAM IS VAR declarations MY_BEGIN commands END {
                $$ = declareMain($6);
            }
        |	PROGRAM IS MY_BEGIN commands END {
                $$ = declareMain($4);
            }
        ;

commands:
            commands command {
                $1->splice($1->end(), *$2);
                $$ = $1;
            }
        |	command { $$ = $1; }
        ;

command:
            IDENTIFIER SUBSTITUTE expression ';' {
                $$ = assign($1, $3, yylineno);
            }
        |	IDENTIFIER SUBSTITUTE value '*' value ';' {
                $$ = new list<string>();
                $$ = mul($1, $3, $5, yylineno);
            }
        |	IDENTIFIER SUBSTITUTE value '/' value ';' {
                $$ = new list<string>();
                $$ = divmod($1, $3, $5, false, yylineno);
            }
        |	IDENTIFIER SUBSTITUTE value '%' value ';' {
                $$ = new list<string>();
                $$ = divmod($1, $3, $5, true, yylineno);
            }
        |	IF condition THEN then_head commands else_head ELSE commands ENDIF {
                $$ = ifElseStatement($2, $5, $8);
            }
        |	IF condition THEN then_head commands ENDIF {
                $$ = ifStatement($2, $5);
            }
        |	WHILE condition DO then_head commands ENDWHILE {
                $$ = whileLoop($2, $5);
            }
        |	REPEAT commands UNTIL condition ';' {
                $$ = repeatUntil($4, $2);
            }
        |	proc_call ';' {
                $$ = $1;
            }
        |	READ IDENTIFIER ';' {
                $$ = read($2, yylineno);
            }
        |	WRITE value ';' {
                $$ = write($2, yylineno);
            }
        ;

then_head:
            { prepare_then(); }
        ;

else_head:
            { prepare_else(); }
        ;

proc_call:
            IDENTIFIER '(' arguments ')' {
                $$ = call($1, *$3, yylineno);
            }
        ;

arguments:
            arguments ',' IDENTIFIER {
                $$ = $1;
                $$->push_back($3);
            }
        |   IDENTIFIER {
                $$ = new list<string>();
                $$->push_back($1);
            }
        ;

proc_head:
            IDENTIFIER '(' declarations ')' {
                $$ = declareProcedure($1, yylineno);
            }
        ;

declarations:
            declarations ',' IDENTIFIER	{
                declare($3, yylineno);
            }
        |	IDENTIFIER {
                declare($1, yylineno);
            }
        ;

expression:
            value {
                $$ = get($1, yylineno);
            }
        |	value '+' value {
                $$ = add($1, $3, yylineno);
            }
        |	value '-' value {
                $$ = sub($1, $3, yylineno);
            }
        ;

condition:
            value '=' value {
                $$ = eq($1, $3, yylineno);
            }
        |	value NEQ value {
                $$ = neq($1, $3, yylineno);
            }
        |	value '>' value {
                $$ = gtr($1, $3, yylineno);
            }
        |	value '<' value {
                $$ = lss($1, $3, yylineno);
            }
        |	value GEQ value {
                $$ = geq($1, $3, yylineno);
            }
        |	value LEQ value {
                $$ = leq($1, $3, yylineno);
            }
        ;

value:
            NUM {
                $$ = new Value({true, $1});
            }
        |	IDENTIFIER {
                $$ = new Value({false, $1});
            }
        ;
%%

void yyerror (char const *s) {
    cerr << s << "\n";
}

void run_parser(FILE* input_file, char* output_file_name)
{
    yyset_in(input_file);
    ofstream output_file(output_file_name);
    streambuf *coutbuf = cout.rdbuf();
    cout.rdbuf(output_file.rdbuf());
    yyparse();
    cout.rdbuf(coutbuf);
    output_file.close();
}
